<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <title>processing graph</title>
<link rel="stylesheet" href="../stylesheets/style.css">
<script type="text/javascript" src="/javascripts/processing.js"></script>
<script type="text/javascript" src="/javascripts/minim.js"></script>
    
<script type="text/javascript">
    function drawPointsVsTime(id, data,timestamp) {
        var pjs = Processing.getInstanceById(id);
        pjs.drawPointVsTime(data,timestamp);
        
    }

    function drawPvP(id,PointX,PointY,labelX,labelY){
        var pjs = Processing.getInstanceById(id);
        pjs.drawPointVsPoint(PointX,PointY,labelX,labelY); 
        //console.log('PvP');
    }
    
    function cls(id){
        var pjs =Processing.getInstanceById(id);
        pjs.clearPositions();
    }
    
    </script>
  </head>

<body onLoad="linedataInputFunction()">
  	
	<div class="lineGraphDiv"name="lineGraphDiv" id="lineGraphDiv" >
	<h1 id=lineGraphTitle>power</h1>
	<canvas id="processingSketch" data-processing-sources="/pde-sketch/graph/graph.pde"></canvas>
    
    
    </div>


	<form>
		<div class="graphSelectButtons">
			<fieldset id="graphDataSelection">
				<legend>Select which data to graph</legend>
							
                
				<span>
				<input type="radio" class="dataSelectorRadio" name="measuredData" id="current" value="current" onclick="cls('processingSketch')">
				<label for="current">Current</label>
				</span>
				<span>
				<input type="radio"  class="dataSelectorRadio" name="measuredData" id="voltage" value="voltage" onclick="cls('processingSketch')">
				<label for="voltage">Voltage</label>
				</span>
				<span>
				<input type="radio"  class="dataSelectorRadio" name="measuredData" id="power" value="power" checked=true  onclick="cls('processingSketch')">
				<label for="power">Power</label>
				</span>
				<span>
				<input type="radio"  class="dataSelectorRadio" name="measuredData" id="rpm" value="rpm"  onclick="cls('processingSketch')">
				<label for="rpm">RPM</label>
				</span>
                
                <div></div>
                <span>
                <input type="radio"  class="dataSelectorRadio" name="measuredData" id="PvsN" value="PvsN" onclick="cls('processingSketch')">
				<label for="P(n)">P(n)</label>
                </span>
                
                
			<div id="selectedData"></div>
	</form>
	</fieldset>
	<script>
		//console.log('what the f');
        var sketch_id="processingSketch";
		var dataSelected = 'power';
		
			$( ".dataSelectorRadio" ).on( "click", function() {

	//		$("#selectedData").html($( "input:checked" ).val() + " is checked!" );
						$("#lineGraphTitle").html($( ".dataSelectorRadio:checked" ).val() );

			 dataSelected = $(".dataSelectorRadio:checked").val();
		//	console.log('dataSelected item is: '+dataSelected);
		});	
						var dataItem;
			var lineGraphSocket = io.connect('http://127.0.0.1:1337');

			lineGraphSocket.on('connect', function (data) {
					console.log('lineGraph client connected ');
					console.log('lineGraph connected data ' + data);

				
			jQuery(function ($) {
				lineGraphSocket.on('updateData', function (data) {
			//		console.log('lineGraph update: ' + data);
					dataItem = JSON.parse(data);
			//		console.log('lineGraph updateData power ' + dataItem.power);

					switch (dataSelected) {
						case 'power':
			//				console.log('graph power '+dataSelected);
                            //cls(sketch_id);
							drawPointsVsTime(sketch_id, Math.abs(Math.ceil((dataItem.power)/1000)), dataItem.timestamp );
							break;
						case 'current':
                            //cls(sketch_id);
			//				console.log('graph current '+dataSelected);
							drawPointsVsTime(sketch_id, dataItem.current, dataItem.timestamp );
							break;
						case 'voltage':
			//				console.log('graph voltage '+dataSelected);
                            //cls(sketch_id);
							drawPointsVsTime(sketch_id, dataItem.voltage, dataItem.timestamp );
							break;
						case 'rpm':
							var realRPM = (dataItem.rpm); //*666.667);
			//				console.log('graph rpm '+dataSelected);
                            //cls(sketch_id);
							drawPointsVsTime( sketch_id,realRPM, dataItem.timestamp );
							break;
                        case 'PvsN':
                            //cls(sketch_id);
                            
                            drawPvP(sketch_id, dataItem.rpm,Math.abs(Math.ceil((dataItem.power)/1000)),'n [1/s]','P [mW]');
                            break;
						default:
			//				console.log('graph default');
                            //cls(sketch_id);
							drawPointsVsTime(sketch_id, Math.abs(Math.ceil((dataItem.power)/1000)), dataItem.timestamp) ;
					}
				 
				});
			});
		
				});
				
	
		</script>							
 
 
 
  </div>
 
</body>
</html>

		