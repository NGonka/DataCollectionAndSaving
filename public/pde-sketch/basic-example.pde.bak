/* 
  PROCESSINGJS.COM - BASIC EXAMPLE
  Delayed Mouse Tracking  
  MIT License - Hyper-Metrix.com/F1LT3R
  Native Processing compatible 
*/  

// Global variables
float radius = 50.0;
int X, Y;
int nX, nY;
int delay = 16;
PImage fade;
boolean save = true;
int count =10000;
 float rWidth,rHeight;
 


// Setup the Processing Canvas
void setup(){
  size( 700, 300 );
  strokeWeight( 10 );
  frameRate( 15 );
  X = width / 2;
  Y = width / 2;
  nX = X;
  nY = Y;
  background(100);  
  fade =get();
   rWidth= width*0.995;
rHeight =height* 0.995;

}

// Main draw loop
void draw(){
  background(100);
  tint(255,255,255,250);
  image(fade,(width -rWidth )/2,(height-rHeight)/2,rWidth,rHeight);
  filter(BLUR,0.5);
  noTint();
  radius = radius + sin( frameCount / 4 );
  
  // Track circle to new destination
  X+=(nX-X)/delay;
  Y+=(nY-Y)/delay;
  
  // Fill canvas grey
  //background( 100 );
  
  // Set fill-color to blue
  fill( 0, 121, 184 );
  
  // Set stroke-color white
  stroke(255); 
  
  // Draw circle
  ellipse( X, Y, radius, radius );    
  if(count>0)
  {
      count--;
  }
 fade=get(0,0,width,height);

 if (save&count==0)
 {
     fade.save("output.png");
     save=false;
 }
 
}


// Set circle's next destination
void mouseMoved(){
  nX = mouseX;
  nY = mouseY;  
}

