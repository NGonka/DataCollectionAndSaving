PFont font;

int numValues = 1;    // number of input values or sensors

int[] values   = new int[numValues];
int[]   min      = new int[numValues];
int[]   max      = new int[numValues];

float[] oldY = new float[numValues];
int oldX =0; 
int[] maxValue = new int[numValues];
int[] minValue = new int[numValues];

float partH;          // partial screen height


int minimum = -6000;
int maximum = 6000;

int xPos = 0; 

void setup(){
    
    size(700,300);
    font = crateFont("arial",16,true);
    emptyPeakArray();
     partH = (height*0.95)/ numValues;
}

void draw(){
    background(0);
    
}

void drawPoints(int Point,int timePoint){
    String inString = Point+","+timePoint;
    if (inString != null) {
    // trim off any whitespace:
    inString = trim(inString);
 
    // split the string on the delimiters and convert the resulting substrings into an float array:
    //int[] valuesTemp = int(splitTokens(inString, ", \t"));
    values = int(splitTokens(inString, ", \t"));    // delimiter can be comma space or tab
 
    // if the array has at least the # of elements as your # of sensors, you know
    // you got the whole data packet.  Map the numbers and put into the variables:
    if (values.length >= numValues) {
      for (int i=0; i<numValues ; i++) {
        //values[i] = float(valuesTemp[i]);
        //print(i + ": " + values[i]);
        // print values:
        
        //Peak detection
        if(values[i]>maxValue[i])
        {
        maxValue[i]=values[i];
        }
        if(values[i]<minValue[i])
        {
        minValue[i]=values[i];
        }
        

        
        //little Textbox upper left corner
        fill(50);
        //noStroke();
        stroke(255,0,0);
        strokeWeight(1);
        rect(0, partH*i+1, 120, 24);
        fill(255);
        text(int(values[i]), 10, partH*i+12);
        fill(128);
        text(minValue[i]+", "+maxValue[i], 80, partH*i+12);
        

        
        if (Save)
        {
        newRow.setInt(column[i+1],values[i]);
        recording = true;
        }
        // map to the range of partial screen height:
        float mappedVal = map(values[i], min[i], max[i], 0, partH);

 
        // draw lines:
        stroke(valColor[i]);
        strokeWeight(1);
        xPos=int(oldX)+int(float(values[numValues])/1000.0);        //line(xPos, partH*(i+1), xPos, partH*(i+1) - mappedVal);
        println("Time: ",values[numValues-1]);
        println("xPos: ",xPos);
        println("oldX: ",oldX);
        line(oldX, oldY[i], xPos, partH*(i+1) - mappedVal);
        oldY[i] = partH*(i+1) - mappedVal;
        
        // draw dividing line:
        stroke(255);
        line(0, partH*(i+1), width, partH*(i+1));
        stroke(128,8);
        line(0,partH*(i+1)-partH/2,width, partH*(i+1)-partH/2);
 
        //println("\t"+mappedVal);   // <- uncomment this to debug values
       
      }
       //println(str(values[values.length-1]));
      if(Save)
      {
        newRow.setInt(column[0],values[values.length-1]);
        recording=true;
      }
      
     
      println("Values: ",values);                   // <- uncomment this to debug values
 
      // if at the edge of the screen, go back to the beginning:
      if (xPos >= width) {
        //noLoop();
        
        xPos = 0;
        oldX=0;
        // two options for erasing screen, i like the translucent option to see "history"
        //background(0);           // erase screen with black
        fill(0,200);
        noStroke();
        rect(0,0,width,partH*3-1);    // erase screen with translucent black
        emptyPeakArray();
      }
      else {
        oldX = xPos;
        //xPos+=2;                    // increment the graph's horizontal position
    
    }
      
    }
    
  }
    
}

void emptyPeakArray(){
  for (int i=0;i<numValues;i++)
  {
      minValue[i]=0;
      maxValue[i]=0;
  
  }
  
  void INSTRING(){
      return inString;
  }